/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.witt.monitree.api;

import java.util.List;

import javax.validation.Valid;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.witt.monitree.model.Error;
import com.witt.monitree.model.Reading;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-09-09T22:15:51.602Z")

@Api(value = "readings", description = "the readings API")
public interface ReadingsApi {

    @ApiOperation(value = "Create a new reading entry", notes = "Create a new reading entry in data store.", response = Reading.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Reading", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful insert of history data", response = Reading.class),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Not Authorized", response = Void.class),
        @ApiResponse(code = 500, message = "Server error saving reading data", response = Error.class) })
    
    @RequestMapping(value = "/readings",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Reading> createHistory(@ApiParam(value = "the reading to create"  )  @Valid @RequestBody Reading reading);


    @ApiOperation(value = "Delete the reading", notes = "The end point deletes the reading", response = Void.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Reading", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Deletes the reading with the ID in the path", response = Void.class),
        @ApiResponse(code = 400, message = "Bad request. Query parameters are not valid", response = Error.class),
        @ApiResponse(code = 401, message = "Not Authorized", response = Void.class),
        @ApiResponse(code = 404, message = "No matching reading was found", response = Void.class),
        @ApiResponse(code = 200, message = "Server error querying for reading", response = Error.class) })
    
    @RequestMapping(value = "/readings/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteReadingById(@ApiParam(value = "Reading id",required=true ) @PathVariable("id") Long id);


    @ApiOperation(value = "Get a list of readings", notes = "Get a list of readings from the data store.", response = Reading.class, responseContainer = "List", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Reading", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful retrieval of reading data", response = Reading.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = Error.class),
        @ApiResponse(code = 401, message = "Not Authorized", response = Void.class),
        @ApiResponse(code = 500, message = "Server error saving reading data", response = Error.class) })
    
    @RequestMapping(value = "/readings",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<Reading>> getHistory(@ApiParam(value = "the start date of history to retreive") @RequestParam(value = "startDate", required = false) String startDate,@ApiParam(value = "the start date of history to retreive") @RequestParam(value = "endDate", required = false) String endDate,@ApiParam(value = "the name of the plant to retrieve history on") @RequestParam(value = "name", required = false) String name);


    @ApiOperation(value = "Get the reading by id", notes = "Get the reading by id from the data store", response = Reading.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Reading", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Get specific reading", response = Reading.class),
        @ApiResponse(code = 400, message = "Bad request. Query parameters are not valid", response = Error.class),
        @ApiResponse(code = 401, message = "Not Authorized", response = Void.class),
        @ApiResponse(code = 404, message = "No matching reading was found", response = Void.class),
        @ApiResponse(code = 200, message = "Server error querying for reading", response = Error.class) })
    
    @RequestMapping(value = "/readings/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<Reading> getReadingById(@ApiParam(value = "reading id",required=true ) @PathVariable("id") Long id);


    @ApiOperation(value = "Update the reading", notes = "The end point updates and returns the updated reading", response = Reading.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Reading", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Update a reading", response = Reading.class),
        @ApiResponse(code = 400, message = "Bad request. Query parameters are not valid", response = Error.class),
        @ApiResponse(code = 401, message = "Not Authorized", response = Void.class),
        @ApiResponse(code = 404, message = "No matching reading was found", response = Void.class),
        @ApiResponse(code = 200, message = "Server error querying for reading", response = Error.class) })
    
    @RequestMapping(value = "/readings/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Reading> updateReadingById(@ApiParam(value = "Reading id",required=true ) @PathVariable("id") Long id,@ApiParam(value = "The reading you want to update" ,required=true )  @Valid @RequestBody Reading reading);

}
